var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API reference","title":"API","text":"","category":"section"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Module = [Survey]\nOrder = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"Survey data can be loaded from a DataFrame into a survey design. The package currently supports simple random sample and stratified sample designs. ","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"AbstractSurveyDesign\nSimpleRandomSample\nStratifiedSample","category":"page"},{"location":"api/#Survey.AbstractSurveyDesign","page":"API reference","title":"Survey.AbstractSurveyDesign","text":"AbstractSurveyDesign\n\nSupertype for every survey design type. \n\nnote: Note\nThe data passed to a survey constructor is modified. To avoid this pass a copy of the data instead of the original.\n\n\n\n\n\n","category":"type"},{"location":"api/#Survey.SimpleRandomSample","page":"API reference","title":"Survey.SimpleRandomSample","text":"SimpleRandomSample <: AbstractSurveyDesign\n\nSurvey design sampled by simple random sampling.\n\nArguments:\n\ndata::AbstractDataFrame: the survey dataset (!this gets modified by the constructor). sampsize::Union{Nothing,Symbol,<:Unsigned,Vector{<:Real}}=UInt(nrow(data)):  the survey sample size. popsize::Union{Nothing,Symbol,<:Unsigned,Vector{<:Real}}=nothing: the (expected) survey population size. weights::Union{Nothing,Symbol,Vector{<:Real}}=nothing: the sampling weights. probs::Union{Nothing,Symbol,Vector{<:Real}}=nothing: the sampling probabilities.ignorefpc::Bool=false`: choose to ignore finite population correction and assume all weights equal to 1.0\n\nThe precedence order of using popsize, weights and probs is popsize > weights > probs. E.g. If popsize is given then it is assumed to be the ground truth over weights or probs.\n\nIf popsize is not given weights or probs must be given. popsize is then calculated using the weights and the sample size.\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs; popsize=:fpc)\nSimpleRandomSample:\ndata: 200x42 DataFrame\nweights: 31.0, 31.0, 31.0, ..., 31.0\nprobs: 0.0323, 0.0323, 0.0323, ..., 0.0323\nfpc: 6194, 6194, 6194, ..., 6194\npopsize: 6194\nsampsize: 200\nsampfraction: 0.0323\nignorefpc: false\n\n\n\n\n\n","category":"type"},{"location":"api/#Survey.StratifiedSample","page":"API reference","title":"Survey.StratifiedSample","text":"StratifiedSample <: AbstractSurveyDesign\n\nSurvey design sampled by stratification.\n\nstrata must be specified as a Symbol name of a column in data.\n\nArguments:\n\ndata::AbstractDataFrame: the survey dataset (!this gets modified by the constructor). strata::Symbol: the stratification variable - must be given as a column in data. sampsize::Union{Nothing,Symbol,<:Unsigned,Vector{<:Real}}=UInt(nrow(data)):  the survey sample size. popsize::Union{Nothing,Symbol,<:Unsigned,Vector{<:Real}}=nothing: the (expected) survey population size. weights::Union{Nothing,Symbol,Vector{<:Real}}=nothing: the sampling weights. probs::Union{Nothing,Symbol,Vector{<:Real}}=nothing: the sampling probabilities.ignorefpc::Bool=false`: choose to ignore finite population correction and assume all weights equal to 1.0\n\nThe popsize, weights and probs parameters follow the same rules as for SimpleRandomSample.\n\njulia> apistrat = load_data(\"apistrat\");\n\njulia> dstrat = StratifiedSample(apistrat, :stype; popsize=:fpc)\nStratifiedSample:\ndata: 200x45 DataFrame\nstrata: stype\nweights: 44.2, 44.2, 44.2, ..., 15.1\nprobs: 0.0226, 0.0226, 0.0226, ..., 0.0662\nfpc: 0.977, 0.977, 0.977, ..., 0.934\npopsize: 4421, 4421, 4421, ..., 755\nsampsize: 100, 100, 100, ..., 50\nsampfraction: 0.0226, 0.0226, 0.0226, ..., 0.0662\nignorefpc: false\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"API reference","title":"API reference","text":"load_data\nSurvey.mean(x::Symbol, design::SimpleRandomSample)\ntotal(x::Symbol, design::SimpleRandomSample)\nquantile","category":"page"},{"location":"api/#Survey.load_data","page":"API reference","title":"Survey.load_data","text":"load_data(name)\n\nLoad a sample dataset as a DataFrame.\n\nAll available datasets can be found here.\n\njulia> apisrs = load_data(\"apisrs\")\n200×40 DataFrame\n Row │ Column1  cds             stype    name             sname                ⋯\n     │ Int64    Int64           String1  String15         String               ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │    1039  15739081534155  H        McFarland High   McFarland High       ⋯\n   2 │    1124  19642126066716  E        Stowers (Cecil   Stowers (Cecil B.) E\n   3 │    2868  30664493030640  H        Brea-Olinda Hig  Brea-Olinda High\n   4 │    1273  19644516012744  E        Alameda Element  Alameda Elementary\n   5 │    4926  40688096043293  E        Sunnyside Eleme  Sunnyside Elementary ⋯\n   6 │    2463  19734456014278  E        Los Molinos Ele  Los Molinos Elementa\n   7 │    2031  19647336058200  M        Northridge Midd  Northridge Middle\n   8 │    1736  19647336017271  E        Glassell Park E  Glassell Park Elemen\n  ⋮  │    ⋮           ⋮            ⋮            ⋮                       ⋮      ⋱\n 194 │    4880  39686766042782  E        Tyler Skills El  Tyler Skills Element ⋯\n 195 │     993  15636851531987  H        Desert Junior/S  Desert Junior/Senior\n 196 │     969  15635291534775  H        North High       North High\n 197 │    1752  19647336017446  E        Hammel Street E  Hammel Street Elemen\n 198 │    4480  37683386039143  E        Audubon Element  Audubon Elementary   ⋯\n 199 │    4062  36678196036222  E        Edison Elementa  Edison Elementary\n 200 │    2683  24657716025621  E        Franklin Elemen  Franklin Elementary\n                                                 36 columns and 185 rows omitted\n\n\n\n\n\n","category":"function"},{"location":"api/#Statistics.mean-Tuple{Symbol, SimpleRandomSample}","page":"API reference","title":"Statistics.mean","text":"mean(x, design)\n\nEstimate the population mean of a variable of a simple random sample, and the corresponding standard error.\n\nThe calculations were done according to the book Sampling Techniques by William Cochran.\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs;popsize=:fpc);\n\njulia> mean(:enroll, srs)\n1×2 DataFrame\n Row │ mean     SE     \n     │ Float64  Float64 \n─────┼──────────────────\n   1 │  584.61  27.3684\n\njulia> mean([:api00, :api99], srs)\n2×3 DataFrame\n Row │ names   mean     SE     \n     │ String  Float64  Float64 \n─────┼──────────────────────────\n   1 │ api00   656.585  9.24972\n   2 │ api99   624.685  9.5003\n\njulia> strat = load_data(\"apistrat\"); \n\njulia> dstrat = StratifiedSample(strat, :stype; popsize  = :fpc); \n\njulia> mean(:api00, dstrat)\n1×2 DataFrame\n Row │ mean     SE     \n     │ Float64  Float64 \n─────┼──────────────────\n   1 │ 662.287  9.40894\n\n\n\n\n\n","category":"method"},{"location":"api/#Survey.total-Tuple{Symbol, SimpleRandomSample}","page":"API reference","title":"Survey.total","text":"total(x, design)\n\nEstimate the population total for the variable specified by x.\n\njulia> using Survey;\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs; popsize=:fpc);\n\njulia> total(:enroll, srs)\n1×2 DataFrame\n Row │ total      SE \n     │ Float64    Float64  \n─────┼─────────────────────\n   1 │ 3.62107e6  1.6952e5\n\njulia> strat = load_data(\"apistrat\");\n\njulia> dstrat = StratifiedSample(strat, :stype; popsize=:fpc);\n\njulia> total(:api00, dstrat)\n1×2 DataFrame\n Row │ total      SE      \n     │ Float64    Float64 \n─────┼────────────────────\n   1 │ 4.10221e6  58279.0\n\njulia> total([:api00, :enroll], dstrat)\n2×3 DataFrame\n Row │ names   total      SE            \n     │ String  Float64    Float64       \n─────┼──────────────────────────────────\n   1 │ api00   4.10221e6  58279.0\n   2 │ enroll  3.68718e6      1.14642e5\n\n\n\n\n\n","category":"method"},{"location":"api/#Statistics.quantile","page":"API reference","title":"Statistics.quantile","text":"quantile(var, design, p; kwargs...)\n\nEstimate quantiles for a complex survey.\n\nHyndman and Fan compiled a taxonomy of nine algorithms to estimate quantiles. These are implemented in Statistics.quantile, which this function calls. The Julia, R and Python-numpy use the same defaults\n\nReferences:\n\nHyndman, R.J and Fan, Y. (1996) \"Sample Quantiles in Statistical Packages\", The American Statistician, Vol. 50, No. 4, pp. 361-365.\nQuantiles on wikipedia\nComplex Surveys: a guide to analysis using R, Section 2.4.1 and Appendix C.4.\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs;popsize=:fpc);\n\njulia> quantile(:api00,srs,0.5)\n1×2 DataFrame\n Row │ probability  quantile \n     │ Float64      Float64  \n─────┼───────────────────────\n   1 │         0.5     659.0\n\njulia> quantile(:enroll,srs,[0.1,0.2,0.5,0.75,0.95])\n5×2 DataFrame\n Row │ probability  quantile \n     │ Float64      Float64  \n─────┼───────────────────────\n   1 │        0.1      245.5\n   2 │        0.2      317.6\n   3 │        0.5      453.0\n   4 │        0.75     668.5\n   5 │        0.95    1473.1\n\n\n\n\n\n","category":"function"},{"location":"api/","page":"API reference","title":"API reference","text":"It is often required to estimate population parameters for sub-populations of interest. For example, you may have a sample of heights, but you want the average heights of males and females separately. ","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"mean(x::Symbol, by::Symbol, design::SimpleRandomSample) \ntotal(x::Symbol, by::Symbol, design::SimpleRandomSample) ","category":"page"},{"location":"api/#Statistics.mean-Tuple{Symbol, Symbol, SimpleRandomSample}","page":"API reference","title":"Statistics.mean","text":"mean(x, by, design)\n\nEstimate the subpopulation mean of a variable x.\n\nThe calculations were done according to the book Model-Assisted Survey Sampling by Carl-Erik Sarndal, Bengt Swensson, Jan Wretman, section 3.3 and Chap 10. Assumes popsize is known and subpopulation size is unknown.\n\njulia> using Survey; \n\njulia> srs = load_data(\"apisrs\"); \n\njulia> srs = SimpleRandomSample(srs; popsize = :fpc);\n\njulia> mean(:api00, :cname, srs) |> first\nDataFrameRow\n Row │ cname     mean     SE     \n     │ String15  Float64  Float64 \n─────┼────────────────────────────\n   1 │ Kern        573.6  42.8026\n\njulia> strat = load_data(\"apistrat\");\n\njulia> dstrat = StratifiedSample(strat, :stype; popsize  = :fpc);\n\njulia> mean(:api00, :cname, dstrat) |> first \nDataFrameRow\n Row │ cname        mean     SE      \n     │ String15     Float64  Float64 \n─────┼───────────────────────────────\n   1 │ Los Angeles  633.511  21.3912\n\n\n\n\n\n","category":"method"},{"location":"api/#Survey.total-Tuple{Symbol, Symbol, SimpleRandomSample}","page":"API reference","title":"Survey.total","text":"total(x, by, design)\n\nEstimate the subpopulation total of a variable x.\n\njulia> using  Survey;\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs;popsize=:fpc);\n\njulia> total(:api00, :cname, srs) |> first\nDataFrameRow\n Row │ cname     total      SE     \n     │ String15  Float64    Float64 \n─────┼──────────────────────────────\n   1 │ Kern      1.77644e5  55600.8\n\n\n\n\n\n\n","category":"method"},{"location":"api/","page":"API reference","title":"API reference","text":"plot(design::AbstractSurveyDesign, x::Symbol, y::Symbol; kwargs...)\nboxplot(design::AbstractSurveyDesign, x::Symbol, y::Symbol; kwargs...)\nhist(design::AbstractSurveyDesign, var::Symbol,\n\t\t\t\t bins::Union{Integer, AbstractVector} = freedman_diaconis(design, var);\n\t\t\t\t normalization = :density,\n\t\t\t\t kwargs...\n    \t\t\t)\ndim(design::AbstractSurveyDesign)\ndimnames(design::AbstractSurveyDesign)\ncolnames(design::AbstractSurveyDesign)","category":"page"},{"location":"api/#Survey.plot-Tuple{AbstractSurveyDesign, Symbol, Symbol}","page":"API reference","title":"Survey.plot","text":"plot(design, x, y; kwargs...)\n\nScatter plot of survey design variables x and y.\n\nThe plot takes into account the frequency weights specified by the user in the design.\n\napisrs = load_data(\"apisrs\");\nsrs = SimpleRandomSample(apisrs; weights = :pw);\ns = plot(srs, :api99, :api00)\nsave(\"scatter.png\", s); nothing # hide\n\n(Image: )\n\n\n\n\n\n","category":"method"},{"location":"api/#Survey.boxplot-Tuple{AbstractSurveyDesign, Symbol, Symbol}","page":"API reference","title":"Survey.boxplot","text":"boxplot(design, x, y; kwargs...)\n\nBox plot of survey design variable y grouped by column x.\n\nWeights can be specified by a Symbol using the keyword argument weights.\n\nThe keyword arguments are all the arguments that can be passed to mapping in AlgebraOfGraphics.\n\napisrs = load_data(\"apisrs\");\nsrs = SimpleRandomSample(apisrs; weights = :pw);\nbp = boxplot(srs, :stype, :enroll; weights = :pw)\nsave(\"boxplot.png\", bp); nothing # hide\n\n(Image: )\n\n\n\n\n\n","category":"method"},{"location":"api/#Survey.hist","page":"API reference","title":"Survey.hist","text":"hist(design, var, bins = freedman_diaconis; normalization = :density, kwargs...)\n\nHistogram plot of a survey design variable given by var.\n\nbins can be an Integer specifying the number of equal-width bins, an AbstractVector specifying the bins intervals, or a Function specifying the function used for calculating the number of bins. The possible functions are sturges and freedman_diaconis.\n\nThe normalization can be set to :none, :density, :probability or :pdf. See AlgebraOfGraphics.histogram for more information.\n\nFor the complete argument list see Makie.hist.\n\nnote: Note\nThe weights argument should be a Symbol specifying a design variable.\n\napisrs = load_data(\"apisrs\");\nsrs = SimpleRandomSample(apisrs;popsize=:fpc);\nh = hist(srs, :enroll)\nsave(\"hist.png\", h); nothing # hide\n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"api/#Survey.dim-Tuple{AbstractSurveyDesign}","page":"API reference","title":"Survey.dim","text":"dim(design)\n\nGet the dimensions of a SurveyDesign.\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs; popsize =:fpc);\n\njulia> dim(srs)\n(200, 42)\n\n\n\n\n\n","category":"method"},{"location":"api/#Survey.dimnames-Tuple{AbstractSurveyDesign}","page":"API reference","title":"Survey.dimnames","text":"dimnames(design)\n\nGet the names of the rows and columns of a SurveyDesign.\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs;popsize=:fpc);\n\njulia> dimnames(srs)\n2-element Vector{Vector{String}}:\n [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"  …  \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"]\n [\"Column1\", \"cds\", \"stype\", \"name\", \"sname\", \"snum\", \"dname\", \"dnum\", \"cname\", \"cnum\"  …  \"grad.sch\", \"avg.ed\", \"full\", \"emer\", \"enroll\", \"api.stu\", \"pw\", \"fpc\", \"weights\", \"probs\"]\n\n\n\n\n\n","category":"method"},{"location":"api/#Survey.colnames-Tuple{AbstractSurveyDesign}","page":"API reference","title":"Survey.colnames","text":"colnames(design)\n\nGet the column names of a SurveyDesign.\n\njulia> apisrs = load_data(\"apisrs\");\n\njulia> srs = SimpleRandomSample(apisrs; popsize=:fpc);\n\njulia> colnames(srs)\n42-element Vector{String}:\n \"Column1\"\n \"cds\"\n \"stype\"\n \"name\"\n \"sname\"\n \"snum\"\n \"dname\"\n \"dnum\"\n \"cname\"\n \"cnum\"\n ⋮\n \"avg.ed\"\n \"full\"\n \"emer\"\n \"enroll\"\n \"api.stu\"\n \"pw\"\n \"fpc\"\n \"weights\"\n \"probs\"\n\n\n\n\n\n","category":"method"},{"location":"R_comparison/#Moving-from-R-to-Julia","page":"Moving from R","title":"Moving from R to Julia","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"This section presents examples to help move from R to Julia. Examples show R and Julia code for common operations in survey analysis. <br> For the same operation, first the R and then the Julia code is presented. ","category":"page"},{"location":"R_comparison/#Simple-random-sample","page":"Moving from R","title":"Simple random sample","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"The apisrs data, which is provided in both survey and Survey.jl, is used as an example. It's a simple random sample of the Academic Performance Index of Californian schools.","category":"page"},{"location":"R_comparison/#.-Creating-a-survey-design","page":"Moving from R","title":"1. Creating a survey design","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"Instantiating a simple random sample survey design.","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"library(survey)\ndata(api)\ndsrs = svydesign(id = ~1, data = apisrs, weights = ~pw, fpc = ~fpc)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"using Survey\nsrs = load_data(\"apisrs\")\ndsrs = SimpleRandomSample(srs; popsize = :fpc)","category":"page"},{"location":"R_comparison/#.-Mean","page":"Moving from R","title":"2. Mean","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the mean of the variable api00 is calculated. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svymean(~api00, dsrs)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"mean(:api00, dsrs)","category":"page"},{"location":"R_comparison/#.-Total","page":"Moving from R","title":"3. Total","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the sum of the variable api00 is calculated. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svytotal(~api00, dsrs)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"total(:api00, dsrs)","category":"page"},{"location":"R_comparison/#.-Quantile","page":"Moving from R","title":"4. Quantile","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the median of the variable api00 is calculated.","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svyquantile(~api00, dsrs, 0.5)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"quantile(:api00, dsrs, 0.5)","category":"page"},{"location":"R_comparison/#.-Domain-estimation","page":"Moving from R","title":"5. Domain estimation","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the mean of the variable api00 is calculated grouped by the variable cname. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svyby(~api00, ~cname, dsrs, svymean)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"mean(:api00, :cname, dsrs)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the total of the variable api00 is calculated grouped by the variable cname. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svyby(~api00, ~cname, dsrs, svytotal)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"total(:api00, :cname, dsrs)","category":"page"},{"location":"R_comparison/#Stratified-sample","page":"Moving from R","title":"Stratified sample","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"The apistrat data, which is provided in both survey and Survey, is used as an example. It's a stratified sample of the Academic Performance Index of Californian schools.","category":"page"},{"location":"R_comparison/#.-Creating-a-design-object","page":"Moving from R","title":"1. Creating a design object","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"The following example shows how to construct a design object for a stratified sample. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"library(survey)\ndata(api)\ndstrat = svydesign(id = ~1, data = apistrat, strata = ~stype, weights = ~pw, fpc = ~fpc)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"using Survey\nstrat = load_data(\"apistrat\")\ndstrat = StratifiedSample(strat, :stype; popsize  = :fpc)","category":"page"},{"location":"R_comparison/#.-Mean-2","page":"Moving from R","title":"2. Mean","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the mean of the variable api00 is calculated. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svymean(~api00, dstrat)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"mean(:api00, dstrat)","category":"page"},{"location":"R_comparison/#.-Total-2","page":"Moving from R","title":"3. Total","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the sum of the variable api00 is calculated. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svytotal(~api00, dstrat)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"total(:api00, dstrat)","category":"page"},{"location":"R_comparison/#.-Quantile-2","page":"Moving from R","title":"4. Quantile","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the median of the variable api00 is calculated.","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svyquantile(~api00, dstrat, 0.5)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"quantile(:api00, dstrat, 0.5)","category":"page"},{"location":"R_comparison/#.-Domain-estimation-2","page":"Moving from R","title":"5. Domain estimation","text":"","category":"section"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"In the following example the mean of the variable api00 is calculated grouped by the variable cname. ","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"svyby(~api00, ~cname, dstrat, svymean)","category":"page"},{"location":"R_comparison/","page":"Moving from R","title":"Moving from R","text":"mean(:api00, :cname, dstrat)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Survey","category":"page"},{"location":"#Survey","page":"Home","title":"Survey","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is used to study complex survey data. It aims to be a fast alternative to the Survey package in R developed by Professor Thomas Lumley.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package currently supports simple random sample and stratified sample. In future releases, it will support multistage sampling as well. ","category":"page"},{"location":"#Basic-demo","page":"Home","title":"Basic demo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following demo uses the Academic Performance Index (API) dataset for Californian schools. The data sets contain information for all schools with at least 100 students and for various probability samples of the data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The API program has been discontinued at the end of 2018. Information is archived at https://www.cde.ca.gov/re/pr/api.asp","category":"page"},{"location":"","page":"Home","title":"Home","text":"Firstly, a survey design needs a dataset from which to gather information. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sample datasets provided with the package can be loaded as DataFrames using the load_data function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> apisrs = load_data(\"apisrs\");","category":"page"},{"location":"","page":"Home","title":"Home","text":"apisrs is a simple random sample of the Academic Performance Index of Californian schools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, we can build a design. The design corresponding to a simple random sample is SimpleRandomSample, which can be instantiated by calling the constructor:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> srs = SimpleRandomSample(apisrs; weights = :pw)\nSimpleRandomSample:\ndata: 200x42 DataFrame\nweights: 31.0, 31.0, 31.0, ..., 31.0\nprobs: 0.0323, 0.0323, 0.0323, ..., 0.0323\nfpc: 6194, 6194, 6194, ..., 6194\npopsize: 6194\nsampsize: 200\nsampfraction: 0.0323\nignorefpc: false","category":"page"},{"location":"","page":"Home","title":"Home","text":"With a SimpleRandomSample (as well as with any subtype of AbstractSurveyDesign) it is possible to calculate estimates of the mean, population total, etc., for a given variable, along with the corresponding standard errors.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> mean(:api00, srs)\n1×2 DataFrame\n Row │ mean     sem     \n     │ Float64  Float64 \n─────┼──────────────────\n   1 │ 656.585  9.24972\n\njulia> total(:api00, srs)\n1×2 DataFrame\n Row │ total      se_total \n     │ Float64    Float64  \n─────┼─────────────────────\n   1 │ 4.06689e6   57292.8","category":"page"}]
}
